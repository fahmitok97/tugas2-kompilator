Opening files...
Parsing specification from standard input...
Checking specification...
Building parse tables...
  Computing non-terminal nullability...
  Computing first sets...
  Building state machine...
  Filling in tables...
  Checking for non-reduced productions...
Writing parser...
===== Terminals =====
[0]EOF [1]error [2]PLUS [3]TIMES [4]LPAREN 
[5]RPAREN [6]ID 

===== Non terminals =====
[0]$START [1]E [2]T [3]F 

===== Productions =====
[0] E ::= E PLUS T 
[1] $START ::= E EOF 
[2] E ::= T 
[3] T ::= T TIMES F 
[4] T ::= F 
[5] F ::= LPAREN E RPAREN 
[6] F ::= ID 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [F ::= (*) LPAREN E RPAREN , {EOF PLUS TIMES }]
  [E ::= (*) T , {EOF PLUS }]
  [T ::= (*) F , {EOF PLUS TIMES }]
  [$START ::= (*) E EOF , {EOF }]
  [F ::= (*) ID , {EOF PLUS TIMES }]
  [T ::= (*) T TIMES F , {EOF PLUS TIMES }]
  [E ::= (*) E PLUS T , {EOF PLUS }]
}
transition on LPAREN to state [5]
transition on E to state [4]
transition on F to state [3]
transition on T to state [2]
transition on ID to state [1]

-------------------
lalr_state [1]: {
  [F ::= ID (*) , {EOF PLUS TIMES RPAREN }]
}

-------------------
lalr_state [2]: {
  [E ::= T (*) , {EOF PLUS RPAREN }]
  [T ::= T (*) TIMES F , {EOF PLUS TIMES RPAREN }]
}
transition on TIMES to state [10]

-------------------
lalr_state [3]: {
  [T ::= F (*) , {EOF PLUS TIMES RPAREN }]
}

-------------------
lalr_state [4]: {
  [$START ::= E (*) EOF , {EOF }]
  [E ::= E (*) PLUS T , {EOF PLUS }]
}
transition on EOF to state [12]
transition on PLUS to state [8]

-------------------
lalr_state [5]: {
  [F ::= LPAREN (*) E RPAREN , {EOF PLUS TIMES RPAREN }]
  [F ::= (*) LPAREN E RPAREN , {PLUS TIMES RPAREN }]
  [E ::= (*) T , {PLUS RPAREN }]
  [T ::= (*) F , {PLUS TIMES RPAREN }]
  [F ::= (*) ID , {PLUS TIMES RPAREN }]
  [T ::= (*) T TIMES F , {PLUS TIMES RPAREN }]
  [E ::= (*) E PLUS T , {PLUS RPAREN }]
}
transition on LPAREN to state [5]
transition on E to state [6]
transition on F to state [3]
transition on T to state [2]
transition on ID to state [1]

-------------------
lalr_state [6]: {
  [E ::= E (*) PLUS T , {PLUS RPAREN }]
  [F ::= LPAREN E (*) RPAREN , {EOF PLUS TIMES RPAREN }]
}
transition on PLUS to state [8]
transition on RPAREN to state [7]

-------------------
lalr_state [7]: {
  [F ::= LPAREN E RPAREN (*) , {EOF PLUS TIMES RPAREN }]
}

-------------------
lalr_state [8]: {
  [F ::= (*) LPAREN E RPAREN , {EOF PLUS TIMES RPAREN }]
  [T ::= (*) F , {EOF PLUS TIMES RPAREN }]
  [F ::= (*) ID , {EOF PLUS TIMES RPAREN }]
  [E ::= E PLUS (*) T , {EOF PLUS RPAREN }]
  [T ::= (*) T TIMES F , {EOF PLUS TIMES RPAREN }]
}
transition on LPAREN to state [5]
transition on F to state [3]
transition on T to state [9]
transition on ID to state [1]

-------------------
lalr_state [9]: {
  [E ::= E PLUS T (*) , {EOF PLUS RPAREN }]
  [T ::= T (*) TIMES F , {EOF PLUS TIMES RPAREN }]
}
transition on TIMES to state [10]

-------------------
lalr_state [10]: {
  [F ::= (*) LPAREN E RPAREN , {EOF PLUS TIMES RPAREN }]
  [T ::= T TIMES (*) F , {EOF PLUS TIMES RPAREN }]
  [F ::= (*) ID , {EOF PLUS TIMES RPAREN }]
}
transition on LPAREN to state [5]
transition on F to state [11]
transition on ID to state [1]

-------------------
lalr_state [11]: {
  [T ::= T TIMES F (*) , {EOF PLUS TIMES RPAREN }]
}

-------------------
lalr_state [12]: {
  [$START ::= E EOF (*) , {EOF }]
}

-------------------
-------- ACTION_TABLE --------
From state #0
 [term 4:SHIFT(to state 5)] [term 6:SHIFT(to state 1)]
From state #1
 [term 0:REDUCE(with prod 6)] [term 2:REDUCE(with prod 6)]
 [term 3:REDUCE(with prod 6)] [term 5:REDUCE(with prod 6)]
From state #2
 [term 0:REDUCE(with prod 2)] [term 2:REDUCE(with prod 2)]
 [term 3:SHIFT(to state 10)] [term 5:REDUCE(with prod 2)]
From state #3
 [term 0:REDUCE(with prod 4)] [term 2:REDUCE(with prod 4)]
 [term 3:REDUCE(with prod 4)] [term 5:REDUCE(with prod 4)]
From state #4
 [term 0:SHIFT(to state 12)] [term 2:SHIFT(to state 8)]
From state #5
 [term 4:SHIFT(to state 5)] [term 6:SHIFT(to state 1)]
From state #6
 [term 2:SHIFT(to state 8)] [term 5:SHIFT(to state 7)]
From state #7
 [term 0:REDUCE(with prod 5)] [term 2:REDUCE(with prod 5)]
 [term 3:REDUCE(with prod 5)] [term 5:REDUCE(with prod 5)]
From state #8
 [term 4:SHIFT(to state 5)] [term 6:SHIFT(to state 1)]
From state #9
 [term 0:REDUCE(with prod 0)] [term 2:REDUCE(with prod 0)]
 [term 3:SHIFT(to state 10)] [term 5:REDUCE(with prod 0)]
From state #10
 [term 4:SHIFT(to state 5)] [term 6:SHIFT(to state 1)]
From state #11
 [term 0:REDUCE(with prod 3)] [term 2:REDUCE(with prod 3)]
 [term 3:REDUCE(with prod 3)] [term 5:REDUCE(with prod 3)]
From state #12
 [term 0:REDUCE(with prod 1)]
------------------------------
-------- REDUCE_TABLE --------
From state #0
 [non term 1->state 4] [non term 2->state 2] [non term 3->state 3]
From state #1
From state #2
From state #3
From state #4
From state #5
 [non term 1->state 6] [non term 2->state 2] [non term 3->state 3]
From state #6
From state #7
From state #8
 [non term 2->state 9] [non term 3->state 3]
From state #9
From state #10
 [non term 3->state 11]
From state #11
From state #12
-----------------------------
Closing files...
------- CUP v0.10k Parser Generation Summary -------
  0 errors and 0 warnings
  7 terminals, 4 non-terminals, and 7 productions declared, 
  producing 13 unique parse states.
  0 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  0 conflicts detected (0 expected).
  Code written to "parser.java", and "sym.java".
---------------------------------------------------- (v0.10k)
